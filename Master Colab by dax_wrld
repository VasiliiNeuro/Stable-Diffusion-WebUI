{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "private_outputs": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dax-wrld/Stable-Diffusion-WebUI/blob/main/Master%20Colab%20by%20dax_wrld\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "![](https://visitor-badge.glitch.me/badge?page_id=dax-wrld.Stable-Diffusion-WebUI.1G81uwv5vIk45KLIEymtY_lbg24S8mOM_01.02.23:2335&left_color=blue&right_color=green)\n",
        "# **Stable Diffusion 1.5 by {dax-wrld}**"
      ],
      "metadata": {
        "id": "wShWkZznNarj"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q8re2uVveke3",
        "cellView": "form"
      },
      "outputs": [],
      "source": [
        "#@title üëá **–ó–∞–ø—É—Å–∫**\n",
        "from subprocess import getoutput\n",
        "from IPython.display import clear_output\n",
        "from IPython.utils import capture\n",
        "from datetime import timedelta\n",
        "import time\n",
        "import os\n",
        "\n",
        "%cd /content\n",
        "try:\n",
        "  start_colab\n",
        "except:\n",
        "  start_colab = int(time.time())-5\n",
        "clear_output()\n",
        "\n",
        "\n",
        "# ==–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ GPU=====================\n",
        "print('\\033[34m ‚åõ –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU - —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å...\\n', end='')\n",
        "output = getoutput('nvidia-smi --query-gpu=gpu_name --format=csv')\n",
        "if \"name\" in output:\n",
        "  gpu_name = output[5:]\n",
        "  print('\u001b[32m ü§© GPU-—É—Å–∫–æ—Ä–∏—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω -', gpu_name, flush=True)\n",
        "else:\n",
        "  print(\"\\033[91m üôÅ GPU-—É—Å–∫–æ—Ä–∏—Ç–µ–ª—å –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω!\\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU!\", flush=True)\n",
        "  from google.colab import runtime\n",
        "  runtime.unassign()\n",
        "\n",
        "\n",
        "#@markdown  <font color=\"Blue\" size=4>**. . : : : :–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–µ—Å–µ—Ç—ã: : : : . .**\n",
        "–ë—ã—Å—Ç—Ä–∞—è_–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ = \"NONE\" #@param[\"NONE\",\"FAST START: Gradio, NO save img, clear SD, original model\",\"STABLE START: Ngrok, save img, save-load config, models from WebUI/models\"]\n",
        "\n",
        "# ==–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞=====================\n",
        "#@markdown  <font color=\"Blue\" size=4>**. . : : : :–ù–∞—Å—Ç—Ä–æ–π–∫–∏: : : : . .**<br>\n",
        "#@markdown <font face=\"Verdana\" size=2 color='black'>\n",
        "#@markdown  <font face=\"Verdana\" size=2 color='gray'>- Clear WebUI: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∏—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏ SD;<br>- From Google_Drive: –°–æ—Ö—Ä–∞–Ω—è—Ç—å/–∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SD —Å Google-–¥–∏—Å–∫–∞<br>–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SD –ø–æ –≤–∞—à–µ–º—É –≤–∫—É—Å—É. –í—Å—ë –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–∞—Ö:\n",
        "\n",
        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è = \"Clear WebUI\" #@param[\"Clear WebUI\", \"From Google-Drive\"]\n",
        "–°–æ—Ö—Ä–∞–Ω—è—Ç—å_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è_–Ω–∞_Google_–î–∏—Å–∫ = False #@param{type:\"boolean\"}\n",
        "–û–±–Ω–æ–≤–∏—Ç—å_SD_–¥–æ_–ø–æ—Å–ª–µ–¥–Ω–µ–π_–≤–µ—Ä—Å–∏–∏ = False #@param{type:\"boolean\"}\n",
        "–¢–µ–º–∞_–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ = \"DARK\" #@param [\"LIGHT\", \"DARK\"]\n",
        "\n",
        "#@markdown  <font color=\"RoyalBlue\" size=3><br>**–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π:**<br>\n",
        "#@markdown  <font face=\"Verdana\" size=2 color='gray'>- Folder-WebUI/models: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–∞–ø–∫–∏ –Ω–∞ Google-–¥–∏—Å–∫–µ (WebUI/models);<br>- Original v1-5-pruned-emaonly: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å\n",
        "–ú–æ–¥–µ–ª–∏ = \"Original v1-5-pruned-emaonly\" #@param [\"Folder-WebUI/models\", \"Original v1-5-pruned-emaonly\"]\n",
        "#@markdown  <font face=\"Verdana\" size=2 color='gray'>–ò–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª—é–±–æ–π –º–æ–¥–µ–ª–∏ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ:\n",
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ=\"\" #@param {type:\"string\"}\n",
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é_–º–æ–¥–µ–ª—å_–Ω–∞_Google_–¥–∏—Å–∫ = False #@param{type:\"boolean\"}\n",
        "\n",
        "#@markdown  <font color=\"RoyalBlue\" size=3><br>**–í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞:**\n",
        "–û—Å–Ω–æ–≤–Ω–æ–π_—Å–µ—Ä–≤–µ—Ä = \"GRADIO\" #@param [\"GRADIO\", \"NGROK\"]\n",
        "#@markdown  <font face=\"Verdana\" size=2 color='gray'>–ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä NGROK, –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∏–∂–µ. –í–∑—è—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ [–∑–¥–µ—Å—å](https://dashboard.ngrok.com/get-started/your-authtoken):\n",
        "Ngrok_—Ç–æ–∫–µ–Ω  = \"\" #@param{type:\"string\"}\n",
        "Ngrok_—Ä–µ–≥–∏–æ–Ω = \"eu\" #@param [\"us\", \"eu\", \"au\", \"ap\", \"sa\", \"jp\", \"in\"]\n",
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∑–∞–≥—Ä—É–∑–∏—Ç—å_—Ç–æ–∫–µ–Ω_—Å_Google_–¥–∏—Å–∫–∞ = False #@param{type:\"boolean\"}\n",
        "# #@markdown  <font face=\"Verdana\" size=2 color='gray'>–í–º–µ—Å—Ç–µ —Å GRADIO/NGROK —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ (localtunnel, cloudlfared, colab native, bore):\n",
        "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ_—Å–µ—Ä–≤–µ—Ä–∞ = False\n",
        "\n",
        "\n",
        "# ==–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞=====================\n",
        "commandline_arguments = \"--enable-insecure-extension-access --share --xformers --disable-safe-unpickle --theme dark --autolaunch --gradio-queue\"\n",
        "destination_dir = \"/content/.downloaded/\"\n",
        "\n",
        "if –ë—ã—Å—Ç—Ä–∞—è_–Ω–∞—Å—Ç—Ä–æ–π–∫–∞==\"FAST START: Gradio, NO save img, clear SD, original model\":\n",
        "  –û—Å–Ω–æ–≤–Ω–æ–π_—Å–µ—Ä–≤–µ—Ä = \"GRADIO\"\n",
        "  –°–æ—Ö—Ä–∞–Ω—è—Ç—å_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è_–Ω–∞_Google_–î–∏—Å–∫ = False\n",
        "  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è = \"Clear WebUI\"\n",
        "  –ú–æ–¥–µ–ª–∏ = \"Original v1-5-pruned-emaonly\"\n",
        "\n",
        "elif –ë—ã—Å—Ç—Ä–∞—è_–Ω–∞—Å—Ç—Ä–æ–π–∫–∞==\"STABLE START: Ngrok, save img, save-load config, models from WebUI/models\":\n",
        "  –û—Å–Ω–æ–≤–Ω–æ–π_—Å–µ—Ä–≤–µ—Ä = \"NGROK\"\n",
        "  –°–æ—Ö—Ä–∞–Ω—è—Ç—å_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è_–Ω–∞_Google_–î–∏—Å–∫ = True\n",
        "  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è = \"From Google Drive\"\n",
        "  –ú–æ–¥–µ–ª–∏ = \"Folder-WebUI/models\"\n",
        "  –†–∞—Å—à–∏—Ä–µ–Ω–∏—è = True\n",
        "\n",
        "\n",
        "\n",
        "# ==–ü–æ–¥–∫–ª—é—á–∞–µ–º Google –¥–∏—Å–∫=====================\n",
        "if –°–æ—Ö—Ä–∞–Ω—è—Ç—å_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è_–Ω–∞_Google_–î–∏—Å–∫ or –ú–æ–¥–µ–ª–∏ ==\"AUTO\" or –ú–æ–¥–µ–ª–∏ ==\"Folder-WebUI/models\" or –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è==\"From Google Drive\":\n",
        "  if not os.path.exists('/content/gdrive'):  \n",
        "    print(\"\\033[34m üíæ –ü–æ–¥–∫–ª—é—á–∞–µ–º Google-–î–∏—Å–∫...\")\n",
        "    try:\n",
        "      with capture.capture_output() as cap:\n",
        "        from google.colab import drive\n",
        "        drive.mount('/content/gdrive')\n",
        "        del cap\n",
        "        print(\"\\033[32m üíæ Google-–î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω.\")\n",
        "    except:\n",
        "      print(\"\\033[91m üíæ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google-–¥–∏—Å–∫—É!\")\n",
        "  else:\n",
        "    print(\"\\033[32m üíæ Google-–î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω.\")\n",
        "\n",
        "# ==–°–∫–∞—á–∏–≤–∞–µ–º Conda –∏ —Ä–µ–ø–æ–∑–∏—Ç–∞—Ä–∏–π=====================\n",
        "if not os.path.exists(\"/content/stable-diffusion-webui\"):\n",
        "  start_install = int(time.time())\n",
        "  print(\"\\033[34m ‚åõ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SD... \")\n",
        "  with capture.capture_output() as cap:\n",
        "    !rm -rf /usr/local/lib/python3.8/dist-packages/scipy /usr/local/lib/python3.8/dist-packages/scipy-1.7.3.dist-info /usr/local/lib/python3.8/dist-packages/scipy.libs\n",
        "    !apt install liblz4-tool aria2\n",
        "    !echo -e \"https://huggingface.co/daxwrld/StableDiffusion-conda-env/resolve/main/conda.tar.lz4\\n\\tout=conda.tar.lz4\\nhttps://huggingface.co/daxwrld/StableDiffusion-conda-env/resolve/main/repo.tar.lz4\\n\\tout=repo.tar.lz4\\n\" \\\n",
        "      | aria2c -i- -j5 -x16 -s16 -k1M -c\n",
        "    !tar -xI lz4 -f conda.tar.lz4 --directory=/\n",
        "    !tar -xI lz4 -f repo.tar.lz4 --directory=/\n",
        "    !rm -rf /content/conda.tar.lz4 /content/repo.tar.lz4\n",
        "    os.environ[\"SAFETENSORS_FAST_GPU\"]='1'\n",
        "\n",
        "    %cd /content\n",
        "    conda_dir = \"/content/conda\"\n",
        "    conda_bin = os.path.join(conda_dir, \"bin\", \"conda\")\n",
        "    install_script = f\"\"\"\n",
        "    eval \"$({conda_bin} shell.bash hook)\"\n",
        "    cd stable-diffusion-webui\n",
        "    python3 -m pip install --upgrade tensorrt triton\n",
        "    python -c 'from launch import prepare_environment; prepare_environment()'\"\"\"\n",
        "    ! {install_script}\n",
        "    del cap\n",
        "  install_time = timedelta(seconds=time.time()-start_install)\n",
        "  print(\"\\033[32m ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SD –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞:\",\"%02d:%02d:%02d ‚ö°\\n\" % (install_time.seconds / 3600, (install_time.seconds / 60) % 60, install_time.seconds % 60), end='', flush=True)\n",
        "else:\n",
        "  print(\"\\033[32m ‚úÖ SD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\")\n",
        "\n",
        "# ==–£–¥–∞–ª—è–µ–º Xformers –Ω–∞ –ø–ª–∞—Ç–Ω–æ–º –∫–æ–ª–ª–∞–±–µ=====================\n",
        "if not 'T4' in gpu_name:\n",
        "  !pip uninstall -y xformers\n",
        "  commandline_arguments.replace(\"--xformers\",\"\")\n",
        "\n",
        "if –¢–µ–º–∞_–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞==\"LIGHT\":\n",
        "  commandline_arguments.replace(\"--theme dark\",\"--theme light\")\n",
        "if –û—Å–Ω–æ–≤–Ω–æ–π_—Å–µ—Ä–≤–µ—Ä==\"NGROK\":\n",
        "  commandline_arguments.replace(\"--share\",\"\")\n",
        "\n",
        "\n",
        "# ==–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å Google –¥–∏—Å–∫–∞=====================\n",
        "\n",
        "if –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è==\"From Google Drive\":\n",
        "  if not os.path.exists('/content/gdrive'):  \n",
        "    print(\"\\033[34m üíæ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º Google-–î–∏—Å–∫...\")\n",
        "    try:\n",
        "      with capture.capture_output() as cap:\n",
        "        from google.colab import drive\n",
        "        drive.mount('/content/gdrive')\n",
        "        del cap\n",
        "        print(\"\\033[32m üíæ Google-–î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω.\")\n",
        "    except:\n",
        "      print(\"\\033[91m üíæ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google-–¥–∏—Å–∫—É!\")\n",
        "  else:\n",
        "    print(\"\\033[32m üíæ Google-–î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.\")\n",
        "    \n",
        "  data_dir_drive =\"/content/gdrive/MyDrive/WebUI\"\n",
        "\n",
        "  if not os.path.exists(f\"{data_dir_drive}\"):\n",
        "    os.makedirs(data_dir_drive, exist_ok=True)\n",
        "\n",
        "  if os.path.exists(f\"{data_dir_drive}/script.pre.sh\"):\n",
        "    ! chmod +x {data_dir_drive}/script.pre.sh\n",
        "    ! {data_dir_drive}/script.pre.sh\n",
        "    \n",
        "  models_path = f\"{data_dir_drive}/models\"\n",
        "  output_path = f\"{data_dir_drive}/outputs\"\n",
        "  config_path = f\"{data_dir_drive}/config\"\n",
        "  scripts_path = f\"{data_dir_drive}/scripts\"\n",
        "  ext_path = f\"{data_dir_drive}/extensions\"\n",
        "\n",
        "  os.makedirs(models_path, exist_ok=True)\n",
        "  os.makedirs(output_path, exist_ok=True)\n",
        "  os.makedirs(config_path, exist_ok=True)\n",
        "  os.makedirs(scripts_path, exist_ok=True)\n",
        "  os.makedirs(f\"{models_path}/Stable-diffusion\", exist_ok=True)\n",
        "    \n",
        "  for script in os.listdir(scripts_path):\n",
        "    ! rm -Rf stable-diffusion-webui/scripts/{script} && ln -s {scripts_path}/{script} stable-diffusion-webui/scripts/{script}\n",
        "\n",
        "  for dir in os.listdir(models_path):\n",
        "    if dir == \"embeddings\":\n",
        "      ! rm -Rf stable-diffusion-webui/embeddings && ln -s {models_path}/embeddings stable-diffusion-webui/embeddings\n",
        "    else:\n",
        "      ! rm -Rf stable-diffusion-webui/models/{dir} && ln -s {models_path}/{dir} stable-diffusion-webui/models/{dir}\n",
        "        \n",
        "  if –°–æ—Ö—Ä–∞–Ω—è—Ç—å_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è_–Ω–∞_Google_–î–∏—Å–∫:\n",
        "    ! rm -Rf stable-diffusion-webui/outputs && ln -s {data_dir_drive}/outputs stable-diffusion-webui/outputs\n",
        "    \n",
        "  for filename in [\"config.json\", \"ui-config.json\", \"styles.csv\", \"artists.csv\"]:\n",
        "    ! rm -f stable-diffusion-webui/{filename}\n",
        "    filepath = f\"{config_path}/{filename}\"\n",
        "    if not os.path.exists(filepath):\n",
        "      if filename.endswith(\".json\"):\n",
        "        with open(filepath, mode=\"w\") as f:\n",
        "          f.write(\"{}\")\n",
        "      else:\n",
        "        ! touch {config_path}/{filename}\n",
        "    ! ln -s {config_path}/{filename} stable-diffusion-webui/{filename}\n",
        "  \n",
        "  ! rm -Rf stable-diffusion-webui/extensions && ln -s {data_dir_drive}/extensions stable-diffusion-webui/extensions\n",
        "\n",
        "if –°–æ—Ö—Ä–∞–Ω—è—Ç—å_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è_–Ω–∞_Google_–î–∏—Å–∫ and –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è==\"Clear WebUI\":\n",
        "  config_dir=\"/content/stable-diffusion-webui/config.json\"\n",
        "  !sed -i 's@\"outdir_txt2img_samples\": \"outputs/txt2img-images\"@\"outdir_txt2img_samples\": \"/content/gdrive/MyDrive/WebUI/outputs/txt2img-images\"@' {config_dir}\n",
        "  !sed -i 's@\"outdir_img2img_samples\": \"outputs/img2img-images\"@\"outdir_img2img_samples\": \"/content/gdrive/MyDrive/WebUI/outputs/img2img-images\"@' {config_dir}\n",
        "  !sed -i 's@\"outdir_extras_samples\": \"outputs/extras-images\"@\"outdir_extras_samples\": \"/content/gdrive/MyDrive/WebUI/outputs/extras-images\"@' {config_dir}\n",
        "  !sed -i 's@\"outdir_txt2img_grids\": \"outputs/txt2img-grids\"@\"outdir_txt2img_grids\": \"/content/gdrive/MyDrive/WebUI/outputs/txt2img-grids\"@' {config_dir}\n",
        "  !sed -i 's@\"outdir_img2img_grids\": \"outputs/img2img-grids\"@\"outdir_img2img_grids\": \"/content/gdrive/MyDrive/WebUI/outputs/img2img-grids\"@' {config_dir}\n",
        "  !sed -i 's@\"outdir_save\": \"log/images\"@\"outdir_save\": \"/content/gdrive/MyDrive/WebUI/outputs/log/images\"@' {config_dir}\n",
        "\n",
        "\n",
        "# ==–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤===================== (–ù—É–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏!)\n",
        "# if –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ_—Å–µ—Ä–≤–µ—Ä–∞:\n",
        "#  print(\"\\033[35m ‚åõ –°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞...\")\n",
        "#  with capture.capture_output() as cap:\n",
        "#    %cd /content\n",
        "#    if not os.path.exists('/tools/node/bin/lt'):\n",
        "#     !npm install -g localtunnel\n",
        "#    if not os.path.exists('/usr/bin/cloudflared'):\n",
        "#      !curl -Lo /usr/bin/cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 && chmod +x /usr/bin/cloudflared\n",
        "#    del cap\n",
        "#  !true > /content/nohup.out\n",
        "#  !nohup lt --port 7860 > /content/nohup.out 2>&1 &\n",
        "#  !nohup cloudflared tunnel --url localhost:7860 > /content/nohup.out 2>&1 &\n",
        "#  if with_bore:\n",
        "#    if not os.path.exists('/usr/bin/bore'):\n",
        "#      !curl -Ls https://github.com/ekzhang/bore/releases/download/v0.4.0/bore-v0.4.0-x86_64-unknown-linux-musl.tar.gz | tar zx -C /usr/bin\n",
        "#    !nohup bore local 7860 --to bore.pub > /content/nohup.out 2>&1 &\n",
        "#    if not \"--gradio-auth\" in commandline_arguments:\n",
        "#      import random\n",
        "#      import string\n",
        "#      gradio_password = ''.join(random.choice(string.ascii_lowercase) for i in range(5))\n",
        "#      commandline_arguments+=\" --gradio-auth {}:{}\".format(\"dax\", gradio_password)\n",
        "#    else:\n",
        "#      gradio_password = False\n",
        "#  !sleep 4\n",
        "#  print(\"üí° \\033[95m\\033[1m –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: \", flush=True)\n",
        "#  from google.colab.output import serve_kernel_port_as_window\n",
        "#  serve_kernel_port_as_window(7860, anchor_text=\"https://th15f4k3l1nkofcn0tr34ll0l-7860-colab.googleusercontent.com/\")\n",
        "#  !cat /content/nohup.out | rg -a -o \"https[^ ]*.*\\.trycloudflare\\.com|https[^ ]*.*\\.loca\\.lt|bore.pub:[^ ]*\" | sed 's@bore.pub@http://bore.pub@'\n",
        "#  print(\"\\n\")\n",
        "\n",
        "\n",
        "# ==–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π=====================\n",
        "print('\\033[34m ‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...')\n",
        "\n",
        "if –ú–æ–¥–µ–ª–∏==\"Folder-WebUI/models\" and not –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ:\n",
        "  if not os.path.exists('/content/gdrive'):  \n",
        "    print(\"\\033[34m üíæ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º Google-–î–∏—Å–∫...\")\n",
        "    try:\n",
        "      with capture.capture_output() as cap:\n",
        "        from google.colab import drive\n",
        "        drive.mount('/content/gdrive')\n",
        "        del cap\n",
        "        print(\"\\033[32m üíæ Google-–î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω.\")\n",
        "    except:\n",
        "      print(\"\\033[91m üíæ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google-–¥–∏—Å–∫—É!\")\n",
        "\n",
        "  data_dir_drive =\"/content/gdrive/MyDrive/WebUI\"\n",
        "\n",
        "  if not os.path.exists(f\"{data_dir_drive}\"):\n",
        "    os.makedirs(data_dir_drive, exist_ok=True)\n",
        "\n",
        "  if os.path.exists(f\"{data_dir_drive}/script.pre.sh\"):\n",
        "    ! chmod +x {data_dir_drive}/script.pre.sh\n",
        "    ! {data_dir_drive}/script.pre.sh\n",
        "    \n",
        "  models_path = f\"{data_dir_drive}/models\"\n",
        "  os.makedirs(models_path, exist_ok=True)\n",
        "  \n",
        "  for dir in os.listdir(models_path):\n",
        "    if dir == \"embeddings\":\n",
        "      ! rm -Rf stable-diffusion-webui/embeddings && ln -s {models_path}/embeddings stable-diffusion-webui/embeddings\n",
        "    else:\n",
        "      ! rm -Rf stable-diffusion-webui/models/{dir} && ln -s {models_path}/{dir} stable-diffusion-webui/models/{dir}\n",
        "\n",
        "  print(\"\\033[32m ‚úÖ –ú–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø–∞–ø–∫–∏ –Ω–∞ Google-–î–∏—Å–∫–µ: WebUI/models/Stable-diffusion.\")\n",
        "\n",
        "\n",
        "if –ú–æ–¥–µ–ª–∏==\"Original v1-5-pruned-emaonly\" and not –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ:\n",
        "  if –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è==\"From Google Drive\":\n",
        "    if os.path.exists('/content/gdrive/MyDrive/WebUI/models/Stable-diffusion/v1-5-pruned-emaonly.ckpt') and os.path.getsize(\"/content/gdrive/MyDrive/WebUI/models/Stable-diffusion/v1-5-pruned-emaonly.ckpt\") > 1810671599:\n",
        "      print(\"\\033[32m ‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (Original v1.5 pruned-emaonly). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.\")\n",
        "    else:\n",
        "      print(\"\\033[35m ‚åõ –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–∞–µ–º...\")\n",
        "      with capture.capture_output() as cap:\n",
        "        ! aria2c -d \"/content/gdrive/MyDrive/WebUI/models/Stable-diffusion\" -o v1-5-pruned-emaonly.ckpt --summary-interval=10 -c -x 16 -k 1M -s 16 \"https://huggingface.co/runwayml/stable-diffusion-v1-5/resolve/main/v1-5-pruned-emaonly.ckpt\" \n",
        "        del cap\n",
        "  else:\n",
        "    if os.path.exists('/content/stable-diffusion-webui/models/Stable-diffusion/v1-5-pruned-emaonly.ckpt') and os.path.getsize(\"/content/stable-diffusion-webui/models/Stable-diffusion/v1-5-pruned-emaonly.ckpt\") > 1810671599:\n",
        "      print(\"\\033[32m ‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (Original v1.5 pruned-emaonly). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.\")\n",
        "    else:\n",
        "      print(\"\\033[34m ‚åõ –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–∞–µ–º...\")\n",
        "      with capture.capture_output() as cap:\n",
        "        ! aria2c -d \"/content/stable-diffusion-webui/models/Stable-diffusion\" -o v1-5-pruned-emaonly.ckpt --summary-interval=10 -c -x 16 -k 1M -s 16 \"https://huggingface.co/runwayml/stable-diffusion-v1-5/resolve/main/v1-5-pruned-emaonly.ckpt\" \n",
        "        del cap  \n",
        "\n",
        "# ==–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–µ=====================\n",
        "if –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ:\n",
        "  if –°–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é_–º–æ–¥–µ–ª—å_–Ω–∞_Google_–¥–∏—Å–∫:\n",
        "    if not os.path.exists('/content/gdrive'):  \n",
        "      print(\"\\033[34m üíæ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º Google-–î–∏—Å–∫...\")\n",
        "      try:\n",
        "        with capture.capture_output() as cap:\n",
        "          from google.colab import drive\n",
        "          drive.mount('/content/gdrive')\n",
        "          del cap\n",
        "          print(\"\\033[32m üíæ Google-–î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω.\")\n",
        "      except:\n",
        "        print(\"\\033[91m üíæ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google-–¥–∏—Å–∫—É!\")\n",
        "\n",
        "    models_dir=\"/content/gdrive/MyDrive/WebUI/models/Stable-diffusion\"    \n",
        "    print('\\033[34m üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ... –ò —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ Google –î–∏—Å–∫')\n",
        "  else:\n",
        "    models_dir=\"/content/stable-diffusion-webui/models/Stable-diffusion\" \n",
        "    print('\\033[34m üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ...')\n",
        "  def download(url):\n",
        "    try:\n",
        "      have_drive_link\n",
        "    except:\n",
        "      if \"drive.google.com\" in url:\n",
        "        !pip install -U gdown\n",
        "        have_drive_link = True\n",
        "    links_and_paths = url.split(',')\n",
        "    http_links = []\n",
        "    huggingface_links = []\n",
        "    for –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ in links_and_paths:\n",
        "      –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ = –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ.strip()\n",
        "      if not –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ:\n",
        "        continue\n",
        "        \n",
        "      if '.yaml' in link_or_path or '.yml' in link_or_path or 'discord' in link_or_path:\n",
        "        !wget {link_or_path} -P {destination_dir} -c\n",
        "      elif 'drive.google' in link_or_path:\n",
        "        if 'folders' in –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ:\n",
        "          !gdown --folder {–ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ} -O {destination_dir} --fuzzy -c\n",
        "        else:\n",
        "          !gdown {–ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ} -O {destination_dir} --fuzzy -c\n",
        "      elif 'huggingface' in –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ:\n",
        "        if '/blob/' in –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ:\n",
        "          –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ = –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ.replace('/blob/', '/resolve/')\n",
        "        huggingface_links.append(–ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ)\n",
        "      elif 'http' in –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ or 'magnet' in –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ:\n",
        "        http_links.append(–ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ)\n",
        "      else:\n",
        "        !gdown {–ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ} -O {destination_dir} --fuzzy -c\n",
        "    if http_links:\n",
        "      links_string = ' '.join(['\"{}\"'.format(x) for x in http_links])\n",
        "      !aria2c --optimize-concurrent-downloads --console-log-level=error --summary-interval=10 -j5 -x16 -s16 -k1M -c -d {destination_dir}  -Z {links_string}\n",
        "      del links_string\n",
        "    if huggingface_links:\n",
        "      token = optional_huggingface_token if optional_huggingface_token else \"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\"\n",
        "      user_header = f\"\\\"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É: {token}\\\"\"\n",
        "      # links_string = ' '.join(['\"{}\"'.format(x) for x in huggingface_links])\n",
        "      # !aria2c --summary-interval=10 --header={user_header} -c -x 16 -k 1M -s 16 -d {destination_dir} -Z {links_string}\n",
        "      # for link in huggingface_links:\n",
        "      #   !aria2c --summary-interval=10 --header={user_header} -c -x 16 -k 1M -s 16 -d {destination_dir} -o {link.split('/')[-1]} {link}\n",
        "      links_string = '\\n'.join(['{}\\n\\tout={}'.format(x,unquote(x.split('/')[-1])) for x in huggingface_links])  \n",
        "      !echo -e \"{links_string}\" | aria2c --header={user_header} --optimize-concurrent-downloads --console-log-level=error --summary-interval=10 -i- -j5 -x16 -s16 -k1M -c -d {destination_dir} \n",
        "  \n",
        "  hide_download = True\n",
        "  if not hide_download:\n",
        "    download(model_url)\n",
        "  else:\n",
        "    with capture.capture_output() as cap:\n",
        "      download(model_url)\n",
        "      del cap\n",
        "\n",
        "  with capture.capture_output() as cap:\n",
        "    files = os.listdir(destination_dir)\n",
        "    for file in files:\n",
        "      name, file_extension = os.path.splitext(file)\n",
        "      if '.aria2' in file:\n",
        "        continue\n",
        "      file_path = os.path.join(destination_dir, file)\n",
        "      file_size = os.path.getsize(file_path)\n",
        "      if file_extension in ['.yaml', '.yml'] or file_size > 1_500_000_000: \n",
        "        !ln \"{file_path}\" {models_dir}\n",
        "    del cap\n",
        "\n",
        "  print('\\033[32m üèÅ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.')\n",
        "     \n",
        "\n",
        "# if –ú–æ–¥–µ–ª–∏==\"AUTO\" and not –ó–∞–≥—Ä—É–∑–∏—Ç—å_–ø–æ_—Å—Å—ã–ª–∫–µ:\n",
        "# import glob\n",
        "#  import shutil\n",
        "#  if not os.path.exists('/content/gdrive'):  \n",
        "#    print(\"\\033[34m üíæ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º Google-–î–∏—Å–∫...\")\n",
        "#    try:\n",
        "#      with capture.capture_output() as cap:\n",
        "#        from google.colab import drive\n",
        "#        drive.mount('/content/gdrive')\n",
        "#        del cap\n",
        "#        print(\"\\033[32m üíæ Google-–î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω.\")\n",
        "#    except:\n",
        "#      print(\"\\033[91m üíæ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google-–¥–∏—Å–∫—É!\")\n",
        "\n",
        "#  data_dir_drive =\"/content/gdrive/MyDrive/WebUI\"\n",
        "\n",
        "#  if not os.path.exists(f\"{data_dir_drive}\"):\n",
        "#    os.makedirs(data_dir_drive, exist_ok=True)\n",
        "#\n",
        "#  if os.path.exists(f\"{data_dir_drive}/script.pre.sh\"):\n",
        "#   ! chmod +x {data_dir_drive}/script.pre.sh\n",
        "#    ! {data_dir_drive}/script.pre.sh\n",
        "    \n",
        "#  models_path = f\"{data_dir_drive}/models\"\n",
        "#  os.makedirs(models_path, exist_ok=True)\n",
        "  \n",
        "# for dir in os.listdir(models_path):\n",
        "#  if dir == \"embeddings\":\n",
        "#      ! rm -Rf stable-diffusion-webui/embeddings && ln -s {models_path}/embeddings stable-diffusion-webui/embeddings\n",
        "#    else:\n",
        "#      ! rm -Rf stable-diffusion-webui/models/{dir} && ln -s {models_path}/{dir} stable-diffusion-webui/models/{dir}\n",
        "  \n",
        "#  print(\"\\033[34m üì¶ –í—Å–µ –º–æ–¥–µ–ª–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞ Google-–¥–∏—Å–∫–µ, –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –ø–∞–ø–∫—É WebUI/models/Stable-diffusion.\")\n",
        "#  print(\"‚åõ –ò–¥—ë—Ç –ø–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π...\", end='')\n",
        "#  print(\"\")\n",
        "#  for file in glob.glob('/content/gdrive/MyDrive/**/*.ckpt', recursive = True):\n",
        "#    if not file.find(f\"/content/gdrive/MyDrive/WebUI/models/Stable-diffusion\") != -1:\n",
        "#      try:\n",
        "#        shutil.move(file, f\"/content/gdrive/MyDrive/WebUI/models/Stable-diffusion\")\n",
        "#        print(\"\\033[35m\")\n",
        "#        print(\"‚åõ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å:\" + \"\\033[0m\" + file + \"\\033[35m –ü–µ—Ä–µ–Ω–æ—Å–∏–º...\", end='')\n",
        "#        print('')\n",
        "#      except:\n",
        "#        print(\"\\033[91m ‚ùå –ú–æ–¥–µ–ª—å —Å –∏–º–µ–Ω–µ–º:\" + \"\\033[0m\" + file + \"\\033[91m —É–∂–µ –µ—Å—Ç—å –≤ –ø–∞–ø–∫–µ WebUI/models/Stable-diffusion. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...\")\n",
        "#        print(\"\\033[32m ‚§ì –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å:\"+\"\\033[0m\" + file)\n",
        "#    else:\n",
        "#      print(\"11\")   \n",
        "\n",
        "# ==–°–µ—Ä–≤–µ—Ä=====================\n",
        "# ==–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–≥—Ä–æ–∫=====================\n",
        "if Ngrok_—Å–µ—Ä–≤–µ—Ä==\"NGROK\" or –°–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∑–∞–≥—Ä—É–∑–∏—Ç—å_—Ç–æ–∫–µ–Ω_—Å_Google_–¥–∏—Å–∫–∞:\n",
        "  if –°–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∑–∞–≥—Ä—É–∑–∏—Ç—å_—Ç–æ–∫–µ–Ω_—Å_Google_–¥–∏—Å–∫–∞:\n",
        "    if not os.path.exists('/content/gdrive'):  \n",
        "      print(\"\\033[34m üíæ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º Google-–î–∏—Å–∫...\")\n",
        "      try:\n",
        "        with capture.capture_output() as cap:\n",
        "          from google.colab import drive\n",
        "          drive.mount('/content/gdrive')\n",
        "          del cap\n",
        "          print(\"\\033[32m üíæ Google-–î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω.\")\n",
        "      except:\n",
        "        print(\"\\033[91m üíæ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google-–¥–∏—Å–∫—É!\")\n",
        "    if Ngrok_—Ç–æ–∫–µ–Ω:\n",
        "      if not os.path.exists(\"/content/gdrive/MyDrive/WebUI/ngrokToken.txt\"):\n",
        "        !mkdir -p /content/gdrive/MyDrive/WebUI/\n",
        "        !touch /content/gdrive/MyDrive/WebUI/ngrokToken.txt\n",
        "      f = open(\"/content/gdrive/MyDrive/WebUI/ngrokToken.txt\", \"w+\")\n",
        "      f.write(Ngrok_—Ç–æ–∫–µ–Ω+\",\"+Ngrok_—Ä–µ–≥–∏–æ–Ω)\n",
        "      f.close()\n",
        "    elif os.path.exists('/content/gdrive/MyDrive/WebUI/ngrokToken.txt'):\n",
        "      Ngrok_—Ç–æ–∫–µ–Ω,Ngrok_—Ä–µ–≥–∏–æ–Ω = getoutput(\"cat /content/gdrive/MyDrive/WebUI/ngrokToken.txt\").split(\",\",2)\n",
        "    else:\n",
        "      print(\"\\033[91m –û—à–∏–±–∫–∞! –¢–æ–∫–µ–Ω Ngrok –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!\")\n",
        "  if Ngrok_—Ç–æ–∫–µ–Ω==\"\":\n",
        "    print(\"\\033[34m –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ ‚¨á‚¨á‚¨á —Ç–æ–∫–µ–Ω NGROK —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º –∫–ª–∞–≤–∏—à 'Ctrl+V' –∏ –Ω–∞–∂–º–∏—Ç–µ 'Enter'. –¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–¥–µ—Å—å: https://dashboard.ngrok.com/get-started/your-authtoken\")\n",
        "    grok_—Ç–æ–∫–µ–Ω = input (\"\\033[32m –¢–æ–∫–µ–Ω NGROK: \")\n",
        "  commandline_arguments += ' --ngrok ' + Ngrok_—Ç–æ–∫–µ–Ω + ' --ngrok-region ' + Ngrok_—Ä–µ–≥–∏–æ–Ω\n",
        "\n",
        "# ==–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏=====================\n",
        "if –û–±–Ω–æ–≤–∏—Ç—å_SD_–¥–æ_–ø–æ—Å–ª–µ–¥–Ω–µ–π_–≤–µ—Ä—Å–∏–∏:\n",
        "  !git config --global user.email \"you@example.com\"\n",
        "  !git config --global user.name \"Your Name\"\n",
        "  print(\"\\033[35m ‚åõ –û–±–Ω–æ–≤–ª—è–µ–º SD –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏... \")\n",
        "  with capture.capture_output() as cap:\n",
        "    %cd /content/stable-diffusion-webui\n",
        "    !git pull -X theirs --rebase --autostash\n",
        "    del cap\n",
        "  print(\" \\033[93m ü™Ñ SD –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ WebUI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–ª–∞–± –±–µ–∑ —á–µ–∫-–±–æ–∫—Å–∞ update_sd, –µ—Å–ª–∏ –≤–æ–∑–Ω–∫–∞—é—Ç –æ—à–∏–±–∫–∏\", flush=True)\n",
        "\n",
        "\n",
        "# ==–ó–∞–ø—É—Å–∫=====================\n",
        "%cd /content/stable-diffusion-webui\n",
        "run_script = f\"\"\"\n",
        "eval \"$({conda_bin} shell.bash hook)\"\n",
        "accelerate launch --num_cpu_threads_per_process 1 launch.py\n",
        "\"\"\"\n",
        "! {run_script}\n",
        "\n",
        "\n"
      ]
    }
  ]
}